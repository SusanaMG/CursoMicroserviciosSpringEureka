***************************************
** NOTAS DEL CURSO DE MICROSERVICIOS **
***************************************
------------------------------------------------------------------------------------------------------------------------------------------------
** REFERENCIAS WEB DEL CURSO :

UDEMY: Microservicios con Spring Boot y Spring Cloud Netflix Eureka
https://www.udemy.com/course/microservicios-con-spring-boot-y-spring-cloud/

Spring Tools 4 for Eclipse
https://spring.io/tools

Spring Data
https://spring.io/projects/spring-data

Spring Data JPA (BBDD transaccionales)
https://spring.io/projects/spring-data-jpa

Postman:
https://www.postman.com/
https://www.postman.com/downloads/

Spring cloud jaxb dependency:
https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime

Repositorio de Maven:
https://mvnrepository.com/

Spring Cloud Circuit Breaker:
https://cloud.spring.io/spring-cloud-static/spring-cloud-circuitbreaker/1.0.0.RELEASE/reference/html/

Spring Cloud Netflix:
https://docs.spring.io/spring-cloud-netflix/docs/current/reference/html/

------------------------------------------------------------------------------------------------------------------------------------------------
** Zuul - Portal de entrada - Filtros que manejan el ciclo de vida:
PRE ==> Se ejecuta antes de que el request sea enrutado  ==> Se usa para pasar datos al request.
POST ==> Se ejecuta después de que el request haya sido enrutado  ==> Se usa para modificar la respuesta (típicamente las cabeceras). 
ROUTE ==> Se ejecuta durante el enrutado del request, aquí se resuelve la ruta  ==> Se usa para la comunicación con el microservicio.

------------------------------------------------------------------------------------------------------------------------------------------------
** JSON Web Tokens:
https://jwt.io/
JWT: es un estándar abierto para implementar seguridad en las aplicaciones API Rest basado en tokens. El estándar RFC 7519 es una forma para representar
de forma segura reclamaciones que envía un cliente a un servidor y el servidor interpreta estas reclamaciones o claims que contienen datos (pero que no
sea información sensible). Este estándar permite decodificar ese código, verificar si es válido y también se encarga de generar este código a través 
de una palabra código secreto que tenemos configurado en nuestro servidor.

PARTES DEL JSON WEB TOKEN:
Ejemplo: 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSM
eKKF2QT4fwpMeJf36POk6yJV_adQssw5c
(es decir, PARTE_1.PARTE_2.PARTE_3)
- PARTE_1: CABECERA (HEADER) con información sobre el algoritmo sobre el cual se va a codificar el token y el por otro lado el tipo de token.
- PARTE_2: LOS DATOS O INFORMACIÓN DEL USUARIO(PAYLOAD): "sub" que representa un identificador (ej. username), y luego el resto de datos (nombre, apellido, 
  email, etc), una fecha de creación y opcionalmente una fecha de expiración, información sobre los permisos, privilegios o roles del usuario.
- PARTE_3: VERIFICACIÓN DE LA FIRMA(VERIFY SIGNATURE), es la parte de seguridad. Requiere de un código secreto y sirve para verificar que el token no ha sido 
  manipulado. Codifica el header y los datos. También lo firma. 

------------------------------------------------------------------------------------------------------------------------------------------------
** Spring Security:
https://spring.io/projects/spring-security
https://spring.io/projects/spring-security-oauth
* Spring Security provee caracterçisticas de seguridad para aplicaciones empresariales Java EE.
* Spring Security maneja componentes de "Autenticación" y "Autorización".
- Autenticación: se refiere al proceso de establecer un principal. Un principal significa un usuario, dispositivo o algún otro sistema el cual puede ejecutar 
  alguna acción en nuestro sistema. En general, permite a los principales autenticarse en base a cualquier proveedor de seguridad por ejemplo LDAP, Base de 
	datos relacional principalmente y Autenticación HTTP. 
- Autorización: se refiere al proceso de decidir si se otorga acceso a un usuario para realizar una acción dentro de la aplicación, es decir, para controlar 
  el acceso a los recursos de la aplicaciónpor medio de la asignación de roles y permisosa grupos de usuarios.

** OAuth2 de spring es un framework, es un protocolo estándar de autorización que permite a las aplicaciones de terceros (angular, react, android) autenticarse
con cuentas de usuario que están en otra aplicación, en un servicio HTTP externo, sin compartir toda la información del usuario y menos las credenciales. 
Tiene 2 partes: Authorization Server y el Resource Server (o servidor de recurso). 
- Authorization Server se encarga de la autenticaión del usuario, si es válida genera un token JWT de acceso y se lo provee al usuario.
	- Ruta url: POST/auth/token -> En la cabecera se pasa Authorization y Content-Type. En cuerpo se pasan las credenciales (grant_type, username y password).
- Resource Server se encarga de administrar los permisos y accesos a nuestras páginas y Api Rest (end points) que están con seguridad. Habilita el filtro de 
  spring OAuth2AuthenticationProcessingFilter que se utiliza para validar y dar acceso a una petición Http (o request) que viene desde un cliente. Este request
  es el que envía el token de acceso en las cabeceras. 
	- Ruta url ejemplo: GET/api/clientes -> En la cabecera se envía el atributo Authorization Bearer access_token

------------------------------------------------------------------------------------------------------------------------------------------------
Spring Data JPA: 
https://spring.io/projects/spring-data-jpa
Spring Data JPA: Working with Spring Data Repositories:
https://docs.spring.io/spring-data/jpa/docs/2.4.3/reference/html/#repositories
Para crear los métodos de consulta personalizados:
Spring Data JPA: Working with Spring Data Repositories: Defining Query Methods:
https://docs.spring.io/spring-data/jpa/docs/2.4.3/reference/html/#repositories.query-methods.details
Spring Data JPA: JPA Repositories: Query Methods:
https://docs.spring.io/spring-data/jpa/docs/2.4.3/reference/html/#jpa.query-methods

------------------------------------------------------------------------------------------------------------------------------------------------
Estándar HATEOAS es la abreviación de Hypermedia as the Engine of Application State(hipermedia como motor del estado de la aplicación): es una restricción de la 
arquitectura Api Rest. Cuando el servidor retorna el JSON también retorna otra información en forma de hipervínculos y recursos del API que le indica al cliente
cómo navegar,cómo encontrar la información.

------------------------------------------------------------------------------------------------------------------------------------------------
CREAR EL JAR:
1. En la consola de comandos ponerse en la ruta del proyecto: cd C:\Users\nombreUsuario\SpringTS_workspace\cursoMicroservicios\springboot-servicio-commons
2. Ejecutar el wrapper: mvnw.cmd install
(con el comando "mvnw install" no me creaba el jar en el directorio target del proyecto)
3. Si ya existía un jar del proyecto previamente, ejecutar el wrapper: mvnw.cmd clean install
4. Ver el resultado (el jar): 
	 - Ir a C:\Users\nombreUsuario\.m2\repository\com\formacionbdi\springboot\app\commons\springboot-servicio-commons\0.0.1-SNAPSHOT\springboot-servicio-commons-0.0.1-SNAPSHOT.jar

------------------------------------------------------------------------------------------------------------------------------------------------
GIT - volver a un commit del repositorio y continuar desde allí borrando lo posterior:
git reset <commit> --hard
git push -f origin master

------------------------------------------------------------------------------------------------------------------------------------------------
Authorization tipo Basic: 'Basic' + Base64.encode('frontendapp' + ':' + '12345')

------------------------------------------------------------------------------------------------------------------------------------------------
GENERAR UN NUEVO TOKEN DE ACCESO A PARTIR DEL REFRESH_TOKEN:
Puede ser antes de que caduque el token de acceso o una vez ya caducado.
Es conveniente que el refresh_token tenga un tiempo de validez mayor que el del access_token.
1. Levantar los proyectos: config - eureka - oauth - usuarios - zuul
2. Generar un token de acceso:
    	Método: POST
    	Authorization: TYPE --> Seleccionar Basic Auth
    	--Username: frontendapp  (está configurado en AuthorizationServerConfig)
    	--Password: 12345
    	Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
    	-- Body: x-www-form-urlencoded: 
    	--> KEY: username --> VALUE: admin
    	--> KEY: password --> VALUE: 12345
    	--> KEY: grant_type --> VALUE: password
    	Ejecutar: localhost:8090/api/security/oauth/token
    	Devuelve: el token de acceso (access_token) y también el refresh_token (que permite obtener un token de acceso actualizado).
3. Suponemos que e token de acceso ha expirado.
4. Copiamos el refresh_token.
5. Generar un token de acceso:
    	Método: POST
    	Authorization: TYPE --> Seleccionar Basic Auth
    	--Username: frontendapp  (está configurado en AuthorizationServerConfig)
    	--Password: 12345
    	Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
    	-- Body: x-www-form-urlencoded: 
    	--> KEY: grant_type --> VALUE: refresh_token
    	--> KEY: refresh_token --> VALUE: pegamos el refresh_token que hemos copiado.		
    	Ejecutar: localhost:8090/api/security/oauth/token
    	Devuelve: el nuevo token de acceso (access_token) y también un nuevo refresh_token (que permite obtener un token de acceso actualizado).

------------------------------------------------------------------------------------------------------------------------------------------------
CORS: es el intercambio de recursos de origen cruzado (Cross-origin resource sharing).
Ejmplo: una aplicación cliente (ej. angular) que está en un dominio distinto y en un puerto distinto se quiere conectar/comunicar con nuestro backend, 
nuestras Api Rest con zuul server (que es nuestra puerta de entrada.)
CORS es un mecanismo que utiliza las cabeceras HTTP para permitir que una aplicación cliente que está en otro servidor, en otro dominio distinto al del 
backend tenga los permisos para acceder a los recursos del backend. En este caso a recursos protegidos con Spring Security, particularmente con el servidor de 
recurso que lo tenemos configurado en zuul.

------------------------------------------------------------------------------------------------------------------------------------------------
BASE DE DATOS MySQL:
https://www.mysql.com/
- Descargar la versión Community: 
https://www.mysql.com/downloads/ --> Link MySQL Community (GPL) Downloads (https://dev.mysql.com/downloads/) -->
--> Link MySQL Community Server (https://dev.mysql.com/downloads/mysql/) --> 
--> Link Go to Download Page (https://dev.mysql.com/downloads/windows/installer/8.0.html) -->
--> Descargar la versión completa (no la web): "mysql-installer-community-8.0.23.0.msi" (Windows (x86, 32-bit), MSI Installer)

Instalación: Setup Type = Custom > Select Products and Features = "MySQL Server versión 8.0.15 - X64" + "MySQL Workbench 8.0.15 - X64" (en las 
versiones correspondientes) > Next > Execute > Next > Next > Group Replication = Por defecto (Standalone MySQL Server/ Classic MySQL Replication) > 
> Type and Networking = Por defecto (dejamos el puerto por defecto 3306) > Authentication Method = Por defecto (Use Strong Password Encryption for
Authentication(RECOMMENDED)) > Contraseña para el usuario root: la que queramos > Windows Service  = Por defecto (Standard System Account) > 
> Execute > Finish.

------------------------------------------------------------------------------------------------------------------------------------------------
WEBS PARA BUSCAR LA ZONA HORARIA PARA LA CONFIGURACIÓN DE LA BBDD MySQL (en el application.properties de proyecto usuarios)
https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
https://www.php.net/manual/es/timezones.php
Errores de zona horaria que puede dar MySQL: se soluciona añadiendo "?serverTimezone=Europe/Madrid" a la propiedad spring.datasource.url

Otros errores que puede dar MySQL:
* "Public Key Retrieval is not allowed"
  Caused by: java.sql.SQLNonTransientConnectionException: Public Key Retrieval not allowed.
	---> Se solucionan añadiendo "&allowPublicKeyRetrieval=true" a la propiedad spring.datasource.url
* "SSL connection"
  WARN: Establishing SSL connection without server's identity verification is not recommended.
---> Se solucionan añadiendo "&useSSL=false" a la propiedad spring.datasource.url

FINALMENTE la propiedad spring.datasource.url
spring.datasource.url=jdbc:mysql://localhost:3306/db_springboot_cloud?serverTimezone=Europe/Madrid&allowPublicKeyRetrieval=true&useSSL=false

------------------------------------------------------------------------------------------------------------------------------------------------
BASE DE DATOS PostgreSQL:
https://www.postgresql.org/
- Descargar la versión:
https://www.postgresql.org/download/  --> Elegir sistema operativo: Windows -->
--> Link Download the installer (https://www.enterprisedb.com/downloads/postgres-postgresql-downloads) --> 
--> Elegir sistema operativo y versión del programa: Windows x86-64 y versión 12.5
 
Instalación: Siguiente > Directorio por defecto (C:\Program Files\PostgreSQL\12) > Seleccionar todos los componentes > Directorio donde se guardan 
las bases de datos (C:\Program Files\PostgreSQL\12\data) > Contraseña para el usuario postgres (usuario por defecto): la que queramos (root) > 
> Puerto por defecto (5432) > Cofiguración regional = Por defecto > Siguiente > Siguiente > Cuando termina la instalación: quitar la opcion "Stack
Builder puede ser usado para descargar e instalar herramientas adionales, controladores y aplicaciones para complementar la instalación de PostgreSQL"
> Terminar. 

------------------------------------------------------------------------------------------------------------------------------------------------
La última versión de springboot tienen deshabilitado bootstrap. Hay que habilitarlo añadiendo la dependencia:
<dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-bootstrap</artifactId>
</dependency>

EJEMPLO EN EL PROYECTO PRODUCTOS: Versión 2.4.2 en el pom.xml:

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.2</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

------------------------------------------------------------------------------------------------------------------------------------------------
TRAZABILIDAD DISTRIBUIDA CON SPRING CLOUD SLEUTH Y ZIPKIN:

Trazabilidad Distribuida con Spring Cloud: Sleuth y Zipkin
https://www.paradigmadigital.com/dev/trazabilidad-distribuida-spring-cloud-sleuth-zipkin/

SPRING CLOUD SLEUTH: es una dependencia que nos provee una solución de trazado distribuido para Spring Cloud. Permite identificar la petición
completa de un microservicio, como un todo, y en cada llamada individual a otros microservicios. 

** Hay dos atributos para identificar la petición:
- TraceId: identificador que corresponde a la petición completa, a la traza. 
- SpanId: identificador que corresponde a un lapso de un microservicio determinado, es decir, uan petición específica de un microservicio.

	Una traza (trace) está formada por un conjunto de spans.

	Ejemplo del log del microservicio:
	INFO[servicio-oauth, 8a40fc93ab438507, f72188520726632d, false]
	INFO[nombre del microservicio, identificador de la traza, identificadordel span, exportar a zipkin(true o false)]

También hay anotaciones para obtener los tiempos de comunicación de un microservicio y otro, el tiempo de demora en ejecutar una petición dentro de un 
microservicio (un request), calcular el tiempo de proceso, calcular el tiempo de latencia.

** Atributos Annotation: miden los tiempo de entrada y salida de cada petición, latencia y salud de los servicios:
- cs (Client Sent): el cliente inicia una petición.
- sr (Server Received): el servidor recibe y procesa la petición.
												* LATENCIA = tiempo_sr - tiempo_cs 
												* Latencia de la red o tiempo de comunicación.
- ss (Server Sent): la respuesta es enviada al servicio cliente.
										    * TIEMPO PROCESAMIENTO PETICIÓN = tiempo_ss - tiempo_sr
												* Tiempo de ejecución o de procesamiento del request.  
- cr (Client Received): el cliente recibe la respuesta del servidor.
												* TIEMPO TOTAL TRAZA = tiempo_cr - tiempo_cs
												* Tiempo completo de la traza.												
												
		 -----------------------------------------------------------------------										
		|			CS: Cliente envía     ---- Request --->   SR: Servidor recibe     |
		|			*******************                       *******************     |
		|			*                 *                       *                 *     |
		|			* MICROSERVICIO A *                       * MICROSERVICIO B *     |
		|			*                 *                       *                 *     |
		|			*******************                       *******************     |
		|			CR: Cliente recibe    <--- Response ----  SS: Servidor envía      |
		|			                                                                  |
		|			....................... TraceId: T ..........................>    |  
		|			+++ SpanId: MA +++> ============== SpanId: MB ===============>    |
		 -----------------------------------------------------------------------

SERVIDOR ZIPKIN: 
Es una herrramienta de monitoreo que toma la información de Spring Cloud Sleuth y exporta los datos a una plataforma para poder analizarlos. 

** CARACTERÍSTICAS:
- Servidor para guardar las trazas y monitorización.
- Integra las funcionalidades de Spring Cloud Sleuth. Por lo tanto, al poner en el proyecto la dependencia de Zipkin, ya se incluye Spring Cloud 
	Sleuth y no hay que poner su dependencia por separado.
- Interfaz gráfica para visualizar el árbol de llamada de cada traza.
- Su objetivo es consultar la salud del ecosistema. 
   --------------------------------------------------------------------------------------------------
  |															                                                                     |
  | Cliente Zipkin Microservicio ----------> Servidor Zipkin <--------- Zipkin UI                    |
  |                                                           \                                      |
  |                                                            \--------> BBDD (Memory, MySQL,       |
  |																														           Cassandra, ElasticSerch...) |
  |                                                                                                  |
   --------------------------------------------------------------------------------------------------
** BROKERS DE MENSAJERÍA:
- Además tiene dos formas de envío de trazas al servidor, mediante cabeceras HTTP y con Brokers de mensajería (RabbitMQ, Kafka), por ejemplo:

   ------------------------------------------------------------------------------------------------------------------------------------------------------
  |															                                                                                                                         |
  |                                             *******************                                                                                      |
  | Cliente Zipkin -----Cli.Zipkin Publica----> * Message Broker  * ----Serv.Zipkin Consume----> Servidor Zipkin <--------- Zipkin UI                    |
  | Microservicio                               *(RabbitMQ, Kafka)*                                              \                                       |
  |                                             *******************                                               \--------> BBDD (Memory, MySQL,        |
  |																							(traza en una cola                                                           Cassandra, ElasticSerch...) |
  |															                    de mensajes)                                                                                         |                                                                                                   |
   ------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------









------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------
** SOLUCIÓN DE PROBLEMAS:

Eclipse importación de librerías
https://es.stackoverflow.com/questions/15479/eclipse-importaci%C3%B3n-de-librer%C3%ADas

Can't create a spring starter project in spring tool suite
https://stackoverflow.com/questions/47390485/cant-create-a-spring-starter-project-in-spring-tool-suite

Why am I getting Unknown error in line 1 of pom.xml?
https://stackoverflow.com/questions/56142369/why-am-i-getting-unknown-error-in-line-1-of-pom-xml

M2E:
https://download.eclipse.org/technology/m2e/releases/

El proyecto del microservicio item2 está desarrollado con una versión más antigua de Spring Boot para que pueda
manejar Hystrix que está deprecated en la versión actual.

Caracteres no váidos en el application.properties:
https://github.com/spring-projects/spring-boot/issues/24346
"application.properties contains non UTF-8 characters. I've removed those comments and this doesn't fail for me anymore. Spring Boot 
uses UTF-8 by default when you use spring-boot-starter-parent but that's something you can easily override for your own need."

Springboot en sus últimas versiones tiene deshabilitado bootstrap:
How to consume spring cloud config server Jdbc backend configs from Spring cloud Client server?
https://stackoverflow.com/questions/66010181/how-to-consume-spring-cloud-config-server-jdbc-backend-configs-from-spring-cloud
------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------






















