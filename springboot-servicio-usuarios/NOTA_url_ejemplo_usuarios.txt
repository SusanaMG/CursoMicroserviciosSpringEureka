EJEMPLOS DE URLS PARA PONER EN EL POSTMAN:

****************************************************************************
****************************************************************************
Método: GET

** Levantar los servicios: eureka - usuarios - zuul

localhost:8090/api/usuarios/usuarios
localhost:8090/api/usuarios/usuarios/2



** BÚSQUEDAS:
** Levantar los servicios: eureka - usuarios - zuul

* Sin anotación @RestResource (mirar en código si está activo):
localhost:8090/api/usuarios/usuarios/search/findByUsername?username=admin
localhost:8090/api/usuarios/usuarios/search/findByUsername?username=susana
localhost:8090/api/usuarios/usuarios/search/obtenerPorUsername?username=admin
localhost:8090/api/usuarios/usuarios/search/obtenerPorUsername?username=susana

* Con anotación @RestResource (mirar en código si está activo):
localhost:8090/api/usuarios/usuarios/search/buscar-username?username=admin
localhost:8090/api/usuarios/usuarios/search/buscar-username?username=susana
localhost:8090/api/usuarios/usuarios/search/buscar-username?username=admin 


****************************************************************************
****************************************************************************
**** CRUD:

CASO: está usando el API Rest repository y se hace de forma automática gracias a la
anotación @RepositoryRestResource(path="usuarios")

** Levantar los servicios: eureka - usuarios - zuul

CREAR:
Método: POST
Body: raw --> Seleccionar JSON


{
    "username": "pepe",
    "password": "12345",
    "enabled": true,
    "nombre": "Jose",
    "apellido": "Doe",
    "email": "jose.doe@correo.com",
    "roles": [
        {
            "id":1, "nombre": "ROLE_USER"
        },
        {
            "id":2, "nombre": "ROLE_ADMIN"
        }
    ] 
}
Ejecutar: localhost:8090/api/usuarios/usuarios
Devuelve: 
{
    "username": "pepe",
    "password": "12345",
    "enabled": true,
    "nombre": "Jose",
    "apellido": "Doe",
    "email": "jose.doe@correo.com",
    "roles": [
        {
            "nombre": "ROLE_USER"
        },
        {
            "nombre": "ROLE_ADMIN"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:51514/usuarios/3"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:51514/usuarios/3"
        }
    }
}
Comprobar ejecutando en modo GET: localhost:8090/api/usuarios/usuarios/3

****************************************************************************
EDITAR:
Método: PUT
Body: raw --> Seleccionar JSON
{
    "username": "jose",
    "password": "12345",
    "enabled": true,
    "nombre": "Jose",
    "apellido": "Doe",
    "email": "jose.doe@correo.com",
    "roles": [
        {
            "id":1, "nombre": "ROLE_USER"
        },
        {
            "id":2, "nombre": "ROLE_ADMIN"
        }
    ] 
}
Ejecutar: localhost:8090/api/usuarios/usuarios/3
Devuelve: 
{
    "username": "jose",
    "password": "12345",
    "enabled": true,
    "nombre": "Jose",
    "apellido": "Doe",
    "email": "jose.doe@correo.com",
    "roles": [
        {
            "nombre": "ROLE_USER"
        },
        {
            "nombre": "ROLE_ADMIN"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:51514/usuarios/3"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:51514/usuarios/3"
        }
    }
}
Comprobar ejecutando en modo GET: localhost:8090/api/usuarios/usuarios/3

****************************************************************************
ELIMINAR:
Método: DELETE
Body: none

Ejecutar: localhost:8090/api/usuarios/usuarios/3
Devuelve: Status: 204 No Content

Comprobar ejecutando en modo GET: localhost:8090/api/usuarios/usuarios/3
Devuelve: Status: 404 Not found

Comprobar ejecutando en modo GET: localhost:8090/api/usuarios/usuarios
Devuelve: no aparece el usuario 3

****************************************************************************
****************************************************************************
**** TRAS CREAR LA CLASE RepositoryConfig:

Método: GET

** Levantar los servicios: eureka - usuarios - zuul

localhost:8090/api/usuarios/usuarios

Devuelve:
{
    "id": 1,
    "username": "susana",
    "password": "12345",
    "enabled": true,
    "nombre": "Susana",
    "apellido": "MG",
    "email": "susana@correo.com",
    "roles": [
        {
            "id": 1,
            "nombre": "ROLE_USER"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:55166/usuarios/1"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:55166/usuarios/1"
        }
    }
}

****************************************************************************
ANTES DEVOLVÍA (sin id):
{
    "username": "susana",
    "password": "12345",
    "enabled": true,
    "nombre": "Susana",
    "apellido": "MG",
    "email": "susana@correo.com",
    "roles": [
        {
            "nombre": "ROLE_USER"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:55166/usuarios/1"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:55166/usuarios/1"
        }
    }
}

****************************************************************************
****************************************************************************
**** AUTENTICACIÓN:

** Levantar los servicios: eureka - oauth - usuarios - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345
Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)
Ejemplo de token:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3B
lIjpbInJlYWQiLCJ3cml0ZSJdLCJhcGVsbGlkbyI6IkRvZSIsImNvcnJlbyI6Impob24uZG9
lQGNvcnJlby5jb20iLCJleHAiOjE2MTI4MDM3OTksIm5vbWJyZSI6IkpvaG4iLCJhdXRob3J
pdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6ImJlODkzNzY4LTEwMTQ
tNDVjNi1hMDJmLTAyZTg1NDViMDg2ZiIsImNsaWVudF9pZCI6ImZyb250ZW5kYXBwIn0.Qu5
6XKFHpd9mYwhJCKGEPa5sGuovX4GQydPFAt4H9mo

Copiar el token. Comprobar pegando en la web: https://jwt.io/ el token y viendo que salen los datos en PAYLOAD:

-- Comprobación solo datos básicos: 
{
  "exp": 1612800151,
  "user_name": "admin",
  "authorities": [
    "ROLE_ADMIN",
    "ROLE_USER"
  ],
  "jti": "1d176cf0-0892-4b5b-86ad-723eebbbc644",
  "client_id": "frontendapp",
  "scope": [
    "read",
    "write"
  ]
}

-- Comprobación datos básicos + info adicional
{
  "user_name": "admin",
  "scope": [
    "read",
    "write"
  ],
  "apellido": "Doe",
  "correo": "jhon.doe@correo.com",
  "exp": 1612803799,
  "nombre": "John",
  "authorities": [
    "ROLE_ADMIN",
    "ROLE_USER"
  ],
  "jti": "be893768-1014-45c6-a02f-02e8545b086f",
  "client_id": "frontendapp"
}: 

****************************************************************************
****************************************************************************
**** TRAS IMPLEMENTAR SEGURIDAD:

** Levantar los servicios: eureka - oauth - usuarios - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: susana
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)

Copiar el token.

** A continuación, probar una ruta que requiera autenticación de un rol.  

Método: GET
Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: susana
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/usuarios/usuarios/1

Devuelve: 
{
    "id": 1,
    "username": "susana",
    "password": "$2a$10$hKCmSvkMtZk31AD0.HtfOOjk3bz09rWbsWZGeghV1Bb6QtgxlsJry",
    "enabled": true,
    "nombre": "Susana",
    "apellido": "MG",
    "email": "susana@correo.com",
    "roles": [
        {
            "id": 1,
            "nombre": "ROLE_USER"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:62346/usuarios/1"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:62346/usuarios/1"
        }
    }
}

Con esta autenticación de usuario con rol ROLE_USER no se puede acceder al CRUD. 
El intento de una acción del CRUD devuelve:
{
    "error": "access_denied",
    "error_description": "Access is denied"
}

Para el CRUD hay que acceder con un usuario con rol ROLE_ADMIN.

****************************************************************************
CRUD PARA UN ADMINISTRADOR:

** Levantar los servicios: eureka - oauth - usuarios - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)

Copiar el token.

** A continuación, probar una ruta que requiera autenticación de un rol.  
MÉTODOS: POST, PUT O DELETE.

---------------------------------------------------------------------------------------------
Método: POST

Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/usuarios/usuarios
{
    "username": "pepe",
    "password": "$2a$10$JLqbf1NBsIkq5asDj63SzeCUlzFBx3iL24C/ryeu2HLWknqjejUey",
    "enabled": true,
    "nombre": "Pepe",
    "apellido": "Doe",
    "email": "pepe.doe@correo.com",
    "roles": [
        {
            "id": 1,
            "nombre": "ROLE_USER"
        },
        {
            "id": 2,
            "nombre": "ROLE_ADMIN"
        }
    ]
}

Devuelve:
{
    "id": 3,
    "username": "pepe",
    "password": "$2a$10$JLqbf1NBsIkq5asDj63SzeCUlzFBx3iL24C/ryeu2HLWknqjejUey",
    "enabled": true,
    "nombre": "Pepe",
    "apellido": "Doe",
    "email": "pepe.doe@correo.com",
    "roles": [
        {
            "id": 1,
            "nombre": "ROLE_USER"
        },
        {
            "id": 2,
            "nombre": "ROLE_ADMIN"
        }
    ],
    "_links": {
        "self": {
            "href": "http://DESKTOP-N0HNTRU:62346/usuarios/3"
        },
        "usuario": {
            "href": "http://DESKTOP-N0HNTRU:62346/usuarios/3"
        }
    }
}

---------------------------------------------------------------------------------------------
Método: DELETE

Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/usuarios/usuarios/1

Devuelve: Status: 404 Not found
Devuelve: no aparece el usuario 1

Comprobar ejecutando en modo GET: localhost:8090/api/usuarios/usuarios


****************************************************************************
****************************************************************************



