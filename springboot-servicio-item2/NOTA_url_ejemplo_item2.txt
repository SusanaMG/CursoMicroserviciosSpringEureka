EJEMPLOS DE URLS PARA PONER EN EL POSTMAN:

****************************************************************************
****************************************************************************
Método: GET

** Levantar los servicios: eureka - productos - item2 - zuul

localhost:8003/listar
localhost:8003/ver/2/cantidad/3

localhost:8090/api/items2/listar
localhost:8090/api/items2/ver/2/cantidad/3

** Levantar los servicios: config - eureka - productos - item2 - zuul

* Si está activo el entorno default en la propiedad spring.profiles.active de bootstrap.properties
(es decir si no están actidos dev ni prod):
localhost:8006/listar
localhost:8006/ver/2/cantidad/3


* Si está activo el entorno dev en la propiedad spring.profiles.active de bootstrap.properties:
localhost:8053/listar
localhost:8053/ver/2/cantidad/3
localhost:8053/obtener-config

****************************************************************************
****************************************************************************
**** CRUD:

** Levantar los servicios: config - eureka - productos - item2 - zuul

CASO: RestTemplate

CREAR:
Método: POST
Body: raw --> Seleccionar JSON

{
    "nombre": "Mesa comedor", 
    "precio": 3500,
    "createAt": "2019-06-14"
}
Ejecutar: localhost:8090/api/items2/crear
También se puede ejecutar: localhost:8053/crear
Devuelve: 
{
    "id": 11,
    "nombre": "Mesa comedor",
    "precio": 3500.0,
    "createAt": "2019-06-14T00:00:00.000+00:00",
    "port": null
} 
Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

-----------------------------------------------------------------------------
Otro ejemplo:
{
    "nombre": "Mesa oficina", 
    "precio": 2500,
    "createAt": "2019-06-14"
}
Devuelve:
{
    "id": 12,
    "nombre": "Mesa oficina",
    "precio": 2500.0,
    "createAt": "2019-06-14T00:00:00.000+00:00",
    "port": null
}

****************************************************************************
EDITAR:
Método: PUT
Body: raw --> Seleccionar JSON
{
    "nombre": "Silla oficina", 
    "precio": 500
}
Ejecutar: localhost:8090/api/items2/editar/11
También se puede ejecutar: localhost:8053/editar/11
Devuelve: 
{
    "id": 11,
    "nombre": "Silla oficina",
    "precio": 500.0,
    "createAt": "2019-06-14T00:00:00.000+00:00",
    "port": null
}
Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

****************************************************************************
ELIMINAR:
Método: DELETE
Body: none

Ejecutar: localhost:8090/api/items2/eliminar/11
También se puede ejecutar: localhost:8053/eliminar/11
Devuelve: nada

Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

****************************************************************************
****************************************************************************
**** CRUD:

** Levantar los servicios: config - eureka - productos - item2 - zuul

CASO: Feign

CREAR:
Método: POST
Body: raw --> Seleccionar JSON

{
    "nombre": "Mesa comedor", 
    "precio": 3700,
    "createAt": "2019-06-18"
}
Ejecutar: localhost:8090/api/items2/crear
También se puede ejecutar: localhost:8053/crear
Devuelve: 
{
    "id": 11,
    "nombre": "Mesa comedor",
    "precio": 3700.0,
    "createAt": "2019-06-18T00:00:00.000+00:00",
    "port": null
}
Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

****************************************************************************
EDITAR:
Método: PUT
Body: raw --> Seleccionar JSON
{
    "nombre": "Silla comedor", 
    "precio": 700
}
Ejecutar: localhost:8090/api/items2/editar/11
También se puede ejecutar: localhost:8053/editar/11
Devuelve: 
{
    "id": 11,
    "nombre": "Silla comedor",
    "precio": 700.0,
    "createAt": "2019-06-18T00:00:00.000+00:00",
    "port": null
}

Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

****************************************************************************
ELIMINAR:
Método: DELETE
Body: none

Ejecutar: localhost:8090/api/items2/eliminar/11
También se puede ejecutar: localhost:8053/eliminar/11
Devuelve: nada

Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

****************************************************************************
****************************************************************************
**** AUTENTICACIÓN:

** Levantar los servicios: config - eureka - oauth - usuarios - productos - item2 - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345
Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)
Ejemplo de token:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3B
lIjpbInJlYWQiLCJ3cml0ZSJdLCJhcGVsbGlkbyI6IkRvZSIsImNvcnJlbyI6Impob24uZG9
lQGNvcnJlby5jb20iLCJleHAiOjE2MTI4MDM3OTksIm5vbWJyZSI6IkpvaG4iLCJhdXRob3J
pdGllcyI6WyJST0xFX0FETUlOIiwiUk9MRV9VU0VSIl0sImp0aSI6ImJlODkzNzY4LTEwMTQ
tNDVjNi1hMDJmLTAyZTg1NDViMDg2ZiIsImNsaWVudF9pZCI6ImZyb250ZW5kYXBwIn0.Qu5
6XKFHpd9mYwhJCKGEPa5sGuovX4GQydPFAt4H9mo

Copiar el token. Comprobar pegando en la web: https://jwt.io/ el token y viendo que salen los datos en PAYLOAD:

-- Comprobación solo datos básicos: 
{
  "exp": 1612800151,
  "user_name": "admin",
  "authorities": [
    "ROLE_ADMIN",
    "ROLE_USER"
  ],
  "jti": "1d176cf0-0892-4b5b-86ad-723eebbbc644",
  "client_id": "frontendapp",
  "scope": [
    "read",
    "write"
  ]
}

-- Comprobación datos básicos + info adicional
{
  "user_name": "admin",
  "scope": [
    "read",
    "write"
  ],
  "apellido": "Doe",
  "correo": "jhon.doe@correo.com",
  "exp": 1612803799,
  "nombre": "John",
  "authorities": [
    "ROLE_ADMIN",
    "ROLE_USER"
  ],
  "jti": "be893768-1014-45c6-a02f-02e8545b086f",
  "client_id": "frontendapp"
}: 

****************************************************************************
****************************************************************************
**** TRAS IMPLEMENTAR SEGURIDAD:

** Levantar los servicios: config - eureka - oauth - usuarios - productos - item2 - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: susana
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)

Copiar el token.

** A continuación, probar una ruta que requiera autenticación de un rol.  

Método: GET
Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: susana
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/items2/ver/2/cantidad/3

Devuelve: 
{
    "producto": {
        "id": 2,
        "nombre": "Sony",
        "precio": 700.0,
        "createAt": "2021-02-08T00:00:00.000+00:00",
        "port": 0
    },
    "cantidad": 3,
    "total": 2100.0
}

Con esta autenticación de usuario con rol ROLE_USER no se puede acceder al CRUD. 
El intento de una acción del CRUD devuelve:
{
    "error": "access_denied",
    "error_description": "Access is denied"
}

Para el CRUD hay que acceder con un usuario con rol ROLE_ADMIN.

****************************************************************************
CRUD PARA UN ADMINISTRADOR:

** Levantar los servicios: config - eureka - oauth - usuarios - productos - item2 - zuul

Autenticar:

Método: POST
Authorization: TYPE --> Seleccionar Basic Auth
--Username: frontendapp  (está configurado en AuthorizationServerConfig)
--Password: 12345

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Basic 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/security/oauth/token

Devuelve: el token (access_token) (También el refresh_token que permite obtener un token de acceso actualizado)

Copiar el token.

** A continuación, probar una ruta que requiera autenticación de un rol.  
MÉTODOS: POST, PUT O DELETE.

---------------------------------------------------------------------------------------------
Método: POST

Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/items2/crear
{
    "nombre": "Mesa comedor", 
    "precio": 3700,
    "createAt": "2019-06-18"
}

Devuelve:
{
    "id": 10,
    "nombre": "Mesa comedor",
    "precio": 3700.0,
    "createAt": "2019-06-18T00:00:00.000+00:00",
    "port": null
}

Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar

---------------------------------------------------------------------------------------------
Método: DELETE

Authorization: TYPE --> Seleccionar Bearer Token
--Token: pegar el token copiado.

Click en Headers o en Preview Request: se genera una cabecera > Temporary Headers: KEY Authorization de tipo Bearer 
-- Body: x-www-form-urlencoded: 
   --> KEY: username --> VALUE: admin
   --> KEY: password --> VALUE: 12345
   --> KEY: grant_type --> VALUE: password

Ejecutar: localhost:8090/api/items2/eliminar/10

Devuelve: Status: 404 Not found
Devuelve: no aparece el usuario 10

Comprobar ejecutando en modo GET: localhost:8090/api/items2/listar


****************************************************************************
****************************************************************************


